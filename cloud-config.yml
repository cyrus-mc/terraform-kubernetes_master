#cloud-config

---
coreos:
  update:
    reboot-strategy: etcd-lock

  units:
    - name: format-ephemeral.service
      command: start
      content: |
        [Unit]
        Description=Formats the ephemeral drive
        After=dev-xvdb.device
        Requires=dev-xvdb.device
        ConditionPathExists=!/home/core/.bootstrapped
        [Service]
        ExecStart=/usr/sbin/wipefs -f /dev/xvdb
        ExecStart=/usr/sbin/mkfs.ext4 -F /dev/xvdb
        RemainAfterExit=yes
        Type=oneshot
    - name: var-lib-docker.mount
      command: start
      content: |
        [Unit]
        Description=Mount ephemeral to /var/lib/docker
        Requires=format-ephemeral.service
        After=format-ephemeral.service
        Before=docker.service
        [Mount]
        What=/dev/xvdb
        Where=/var/lib/docker
        Type=ext4
    - name: bootstrap-ansible.service
      command: start
      content: |
        [Unit]
        After=network-online.target
        Description=Bootstrap Ansible
        Requires=network-online.target
        ConditionPathExists=!/home/core/.bootstrapped
        [Service]
        ExecStart=/home/core/bootstrap-ansible.sh
        RemainAfterExit=yes
        Type=oneshot
        User=core
    - name: k8s-get-certificates.service
      command: start
      content: |
        [Unit]
        After=network-online.target
        Description=Retrieve certificates from S3 used by Kubernetes cluster
        Requires=network-online.target
        [Service]
        ExecStartPre=-/usr/bin/mkdir -p /opt/bin
        ExecStartPre=-/usr/bin/mkdir -p /etc/kubernetes/ssl
        ExecStartPre=-/usr/bin/chmod +x /root/get-certificates.sh
        ExecStart=/root/get-certificates.sh
        RemainAfterExit=yes
        Type=oneshot
write-files:
  - path: /etc/ansible/facts.d/k8s_facts.fact
    permissions: "0755"
    content: |
      #!/bin/bash
      
      cat <<EOF
      {
        "api_servers" : "${API-SERVERS}",
        "srv_domain" : "${SRV-DOMAIN}",
        "etcd_servers" : ${ETCD_SERVERS},
        "cluster_name" : "${CLUSTER_NAME}",
        "hostname": "${HOSTNAME}",
        "etcd_elb": "${ETCD_ELB}"
      }
      EOF
  - path: /root/get-certificates.sh
    content: |
      #!/bin/bash
      
      # retrieve S3 utility
      /usr/bin/curl -L -o /opt/bin/s3-get-presigned-url https://github.com/kz8s/s3-get-presigned-url/releases/download/v0.1/s3-get-presigned-url_linux_amd64

      # make executable
      chmod +x /opt/bin/s3-get-presigned-url

      # get API key and certificate as well as the CA certificate
      for file in ca.pem apiserver-key.pem apiserver.pem; do
        /usr/bin/curl $(/opt/bin/s3-get-presigned-url ${AWS_REGION} smarsh-k8s-${CLUSTER_NAME} $file) -o /etc/kubernetes/ssl/$file
      done
  - path: /home/core/bootstrap-ansible.sh
    permissions: "0755"
    owner: "core"
    content: |
      #!/bin/bash

      set -e
      set -x

      PKG_HOME="/home/core"
      PYPY_HOME="/home/core/pypy"
      PYPY_INSTALL="/home/core/.pypy"
      PYPY_SHA256="73014c3840609a62c0984b9c383652097f0a8c52fb74dd9de70d9df2a9a743ff"
      PYPY_VERSION="5.3.1"
      PYPY_FLAVOR="linux_x86_64-portable"

      cd /tmp

      FILENAME="pypy-$PYPY_VERSION-$PYPY_FLAVOR.tar.bz2"
      curl --retry 5 -L -o "$FILENAME" "https://bitbucket.org/squeaky/portable-pypy/downloads/$FILENAME"

      if [[ -n "$PYPY_SHA256" ]]; then
        echo "$PYPY_SHA256  $FILENAME" > "$FILENAME.sha256"
        sha256sum -c "$FILENAME.sha256"
      fi

      tar -xjf "$FILENAME"
      rm -f "$FILENAME"

      mkdir -p "$PYPY_INSTALL"
      rm -rf "$PYPY_INSTALL"
      mv -n "pypy-$PYPY_VERSION-$PYPY_FLAVOR" "$PYPY_INSTALL"

      # make sure PATH contains the location where pip, wheel and friends are
      # so that ansible knows where to find them
      # this is needed since ansible 2.1 changed the way ansible_python_interpreter
      # is parsed
      cat <<EOF > "$PYPY_INSTALL/site-packages/sitecustomize.py"
      import os
      import sys
      os.environ["PATH"] += os.pathsep + os.path.sep.join([sys.prefix, "bin"])
      EOF

      #mkdir -p `dirname "$PYPY_HOME"`
      rm -rf "$PYPY_HOME"

      "$PYPY_INSTALL/bin/pypy" "$PYPY_INSTALL/bin/virtualenv-pypy" --system-site-packages "$PYPY_HOME"

      mkdir -p "$PKG_HOME/bin"

      ln -sf "$PYPY_HOME/bin/python" "$PKG_HOME/bin/python"
      ln -sf "$PYPY_HOME/bin/pip" "$PKG_HOME/bin/pip"
      ln -sf "$PYPY_HOME/bin/wheel" "$PKG_HOME/bin/wheel"

      PYPY_SSL_PATH=`$PYPY_INSTALL/bin/pypy -c 'from __future__ import print_function; import ssl; print(ssl.get_default_verify_paths().openssl_capath)'`

      sudo mkdir -p `dirname $PYPY_SSL_PATH`
      sudo ln -sf $COREOS_SSL_CERTS $PYPY_SSL_PATH

      # install needed modules
      $PYPY_HOME/bin/pip install docker-py        
      $PYPY_HOME/bin/pip install boto

      # now phone home to Ansible tower
      hname=$(hostname -i)
      curl --insecure -f -H 'Content-Type: application/json' -XPOST \
        -d '{ "host_config_key": "38cf5a475bf2b8a8bb1c0fd50563741a", "extra_vars": "{\"hostname\": \"'"$hname"'\"}" }' \
        https://ansible-tower.services.aws:443/api/v1/job_templates/38/callback/

      touch $PKG_HOME/.bootstrapped
